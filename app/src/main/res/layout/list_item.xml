<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="8dp">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">

        <ImageView
            android:id="@+id/item_image"
            android:layout_width="match_parent"
            android:layout_height="194dp"
            android:importantForAccessibility="no"
            android:scaleType="centerCrop" />

        <TextView
            android:id="@+id/item_title"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:padding="16dp"
            android:textAppearance="?attr/textAppearanceHeadline6" />
    </LinearLayout>

</com.google.android.material.card.MaterialCardView>

<!--
    12. Add a TextView with id item_title.
        Add wrap_content for the layout_width and layout_height, as shown in the code below.
    Notice that you don't need a ViewGroup around your layout, because this list item layout will
    later be inflated and added as a child to the parent RecyclerView.
    Alternatively, you could have used File > New > Layout Resource File, with File name
    list_item.xml and TextView as the Root element. Then update the generated code to match the
    code above.
    Create an ItemAdapter class
        In Android Studio in the Project pane, right-click app > java > com.example.affirmations
        and select New > Package.
        Enter adapter as the last part of the package name.
        Right-click on the adapter package and select New > Kotlin File/Class.
        Enter ItemAdapter as the class name, finish, and the ItemAdapter.kt file opens.
    GOTO ItemAdapter.kt

    23. Add an ImageView to the list item layout
    To show an image for each affirmation in your list, you need to add an ImageView to your item
    layout. Because you now have two views (a TextView and ImageView), you need to place them as
    children views within a ViewGroup. To arrange the views in a vertical column, you can use a
    LinearLayout. LinearLayout aligns all child views in a single direction, vertically or
    horizontally.
        Add a LinearLayout around the existing TextView and set the orientation property to
        vertical.
        Move the xmlns schema declaration line from the TextView element to the LinearLayout element
        to get rid of the error.
    24. Inside the LinearLayout, before the TextView, add an ImageView with a resource ID of
        item_image.
        Set the ImageViewâ€˜s width to match_parent and height to 194dp. Depending on screen size,
        this value should show a few cards on screen at any given time.
        Set the scaleType to centerCrop.
        Set the importantForAccessibility attribute to no since the image is used for decorative
        purposes.
        Open adapter/ItemAdapter.kt
        Go to the ItemViewHolder class.

        GOTO ItemAdapter.kt > ItemViewHolder class

    26. So far you've built a functional app that consists of a list of affirmation strings and
    images. In this section, you'll see how small changes in the code and XML can make the app look
    more polished.

    Add padding
    To start with, add some whitespace between the items in the list.
        add 16dp padding to the existing LinearLayout
        Add 16dp padding to the item_title TextView.
        In the TextView, set the textAppearance attribute to ?attr/textAppearanceHeadline6.
        textAppearance is an attribute that allows you to define text-specific styling.
        For other possible predefined text appearance values, you can see the TextAppearances
        section in
        https://medium.com/androiddevelopers/android-styling-common-theme-attributes-8f7c50c9eaba

        Run the app. Do you think the list looks better?

    27. Use cards
    It is still hard to tell if an image belongs to the affirmation text above or below that image.
    To fix this you can use a Card view. A Card view provides an easy way to contain a group of
    views while providing a consistent style for the container. For more Material Design guidance on
    using cards, check out this guide on cards.
        Add a MaterialCardView around the existing LinearLayout.
        Once again, move the schema declaration from LinearLayout into MaterialCardView.
        Set the layout_width of the MaterialCardView to match_parent, and the layout_height to
        wrap_content.
        Add a layout_margin of 8dp.
        Remove the padding in the LinearLayout, so you don't have too much whitespace.
        Now run the app again.
        Can you tell each affirmation apart better with MaterialCardView?

        GOTO colors.zml
-->
